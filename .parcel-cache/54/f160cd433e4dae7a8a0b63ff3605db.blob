window.dom = {
    //增
    create(string){  
        const container = document.createElement("template")
        container.innerHTML = string.trim()     //trim可消除字符串里的空格
        return container.content.firstChild
    },
    after(node, node2){
        node.parentNode.insertBefore(node2, node.nextSibling)
    },
    before(node, node2){
        node.parentNode.insertBefore(node2, node)
    },
    append(parent, node){
        parent.appendChild(node)
    },
    wrap(node, parent){
        dom.before(node, parent)    //将parent节点放在node前面
        dom.append(parent, node)    //然后将node节点插入parent节点，原先的node消失
    },

    //删
    remove(node){
        node.parentNode.removeChild(node)
        return node
    },
    empty(node){
        const array = []
        const {childNode} = node
        let x = node.firstChild
        while(x){
            array.push(dom.remove(node.firstChild))
            x = node.firstChild
        }
        return array
    },

    //改
    attr(node, name, value){    //重载
        if(arguments.length === 3){
            node.setAttribute(name, value)            
        }else if(arguments.length === 2){
            return node.getAttribute(name)
        }
    },
    text(node, string){     //适配
        if(arguments.length === 2){
            if(`innerText` in node){
                node.innerText = string  // ie
            }else{
                node.textContent = string //firefox ,Chrome
            }
        }else if(arguments.length === 1){
            if(`innerText` in node){
                return node.innerText  // ie
            }else{
                return node.textContent //firefox ,Chrome
             }        
        }
    },
    html(node, string){
        if(arguments.length ===2){
            node.innerHTML = string
        }else if(arguments.length === 1 ){
            return node.innerHTML
        }
    },
    style(node, name, value){
        if(arguments.length === 3){
            //dom.style(div, 'color', 'red')
            node.style[name] = value
        }else if (arguments.length === 2){
            if(typeof name === 'string'){
                // dom.style(div, 'color')
                return node.style[name]
            }else if(name instanceof Object){
                // dom.style(div,{color: 'red'})
                for(let key in name){
                    // key: border / color
                    // node.style.border = ...
                    // node.style.color = ...
                    node.style[key] = name[key]
                }
            }   
        }        
    },
    class:{
        add(node, className){
            node.classList.add(className)
        },
        remove(node, className){
            node.classList.remove(className)
        },
        has(node, className){
            return node.classList.contains(className)
        }
    },
    on(node, eventName, fn){
        node.addEventListener(eventName, fn)
    },
    off(node, eventName, fn){
        node.removeEventListener(eventName, fn)
    },

    //查
    find(selector, scope){
        return (scope || document).querySelectorAll(selector)
    },
    parent(node){
        return node.parentNode
    },
    children(node){
        return node.children
    },
    siblings(node){
        return Array.from(node.parentNode.children).filter(n=>n!==node)
    },
    next(node){
        
    }
}

